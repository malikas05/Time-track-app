// AJAX request, returns a jQuery Deferred Object
// Get order or customer details, Process order on form submit
// The logic is server-side, based on data object passed
var processData = function(inputData, resultHandler, URLpath){
    jQuery.ajax({
        url: URLpath,
        cache: false,
        method: "POST",
        data: inputData,
        dataType: "json",
        success: function(data) { resultHandler(data); },
        error: function(data) { resultHandler(null); }
    });
};

/* AJAX Handler*/
// Updates a task based on action
// action can be one of the following:
//  - changeField
//  - deleteTask
//  - addTask
function handleTaskChange(data, taskId, action){
    processData({'data':data, 'id': taskId, 'do': action}, taskChangeOutputHandler, ajaxHandler);
}

// Handles results of a task update
function taskChangeOutputHandler(data){
    console.log(data);
    if (data !== null) {
        // success or error?
        if(!!data.error){
            handleErrors(data.error);
        }else{
            //if new task was created uodate id
            if(!!data.add){
                user_data.current.id = data.add;
            }
        }
    }else {
        location.reload();
    }
}

function handleErrors (error) {
    var message;
    var label = "Error";
    var footer = '<button type="button" class="btn btn-default" data-dismiss="modal">Close</button>';
    switch (error) {
        case 'serverIssue':
            message = "Something went wrong while updating task details on our server.<br/> Please try adjusting your task again.";
            break;
        case 'loginRequired':
            message = "Your credentials have expired to make this change please log in again.";
            break;
        case 'noData':
            message = "Something went wrong and we have recieved no data from you. Please try again.";
            break;
        case 'invalidRequest':
            message = "Our servers were not able to process your data (request generated by your browser was invalid).";
            break;
        case 'endLSstart':
            message = "Task End time cannot be bigger than Start time.<br/> Data will not be saved. Please enter correct time";
            label = "Time entry issue";
            break;
        case 'startGRend':
            message = "Task Start time cannot be bigger than End time.<br/> Data will not be saved. Please enter correct time";
            label = "Time entry issue";
            break;
        default:
          // unknown error show notification
          message = "Something went wrong. Please try again. <br/> If problem persists reload a page and try one more time before contcting us."
          break;
    }
    messageModal(message, label, footer)
}

jQuery(document).on('mousedown', 'select.tags option', function(e) {
    e.preventDefault();
    jQuery(this).prop('selected', !jQuery(this).prop('selected'));
    colorAtag(this);
    updateTags(jQuery(this).parent());
    return false;
});

jQuery(document).on('click', 'select.projects', function(e) {
    var id = jQuery(this).attr("data-day-id");
    if (id == "cur"){
        // current task
        colorAproject(this, "projectH");
    }else {
        // old task
        colorAproject(this, "projectB");
    }
});

function handleTimeChanges(element, newTime, oldTime){
    var el = jQuery(element)[0];
    var dayID = el.getAttribute('data-day-id');
    var taskID = el.getAttribute('data-task-id');
    var task;
    var time = Math.round(newTime/1000);
    if (dayID == "cur") {
        // current time etry
        task = user_data.current;
        taskID="currentTask";
    }else if(dayID.match(/all\d/i) != null){
        // all task list
        dayID = +dayID.substr(3,dayID.length);
        task = allTasks[dayID];
    }else {
        // old time entry
        task = user_data.thisweek[dayID].filter(function(day){
            return day.id == taskID;
        })[0];
    }
    if(el.getAttribute('class').indexOf("startTime") !== -1){
        // start time
        if(time>task.endTime){
            handleErrors("startGRend");
            el.setAttribute('style','color:red;');
        }else {
            el.setAttribute('style','');
            task.startTime = time;
            handleTaskChange({"field": "start", "value": task.startTime, "offset": new Date().getTimezoneOffset()}, task.id, 'changeField');
            updateElapsedTime("#"+taskID, ":", task.startTime, task.endTime||new Date());
            //setStorageData(user_data);
            jQuery(el).fadeOut(100).fadeIn(100);
        }
    }else {
        // end time
        if(time<task.startTime){
            handleErrors("endLSstart");
            el.setAttribute('style','color:red;');
        }else {
            el.setAttribute('style','');
            task.endTime = time;
            handleTaskChange({"field": "end", "value": task.endTime, "offset": new Date().getTimezoneOffset()}, task.id, 'changeField');
            updateElapsedTime("#"+taskID, ":", task.startTime, task.endTime||new Date());
            //setStorageData(user_data);
            jQuery(el).fadeOut(100).fadeIn(100);
        }
    }
}

jQuery(document).on('change', 'input.taskName', function(e) {
    var dayID = jQuery(this).attr("data-day-id");
    var value = jQuery(this).val();
    var taskID = jQuery(this).attr('data-task-id');
    var task;
    if (dayID == "cur"){
        // current task
        task = user_data.current;
        taskID="currentTask";
    }else if(dayID.match(/all\d/i) != null){
        // all task list
        dayID = +dayID.substr(3,dayID.length);
        task = allTasks[dayID];
    }else {
        // old task
        task = user_data.thisweek[dayID].filter(function(day){
            return day.id == taskID;
        })[0];
    }
    task.name = value;
    handleTaskChange({"field": "description", "value": task.name}, task.id, 'changeField');
    //setStorageData(user_data);
    jQuery(this).fadeOut(200).fadeIn(200);
});

function updateTags(element) {
    var dayID = jQuery(element).attr("data-day-id");
    var values = [], i = 0;
    jQuery(element).children().each(function(tag){
      if(jQuery(this).prop('selected')) {
        values[i] = +(jQuery(this).attr('val')); i++;
      }
    });
    var taskID = jQuery(element).attr('data-task-id');
    var task;
    if (dayID == "cur"){
        // current task
        task = user_data.current;
        dayID="currentTask";
    }else if(dayID.match(/all\d/i) != null){
        // all task list
        dayID = +dayID.substr(3,dayID.length);
        task = allTasks[dayID];
    }else {
        // old task
        task = user_data.thisweek[dayID].filter(function(day){
            return day.id == taskID;
        })[0];
    }
    task.tagsApplied = undefined;
    //setStorageData(user_data);
    if (values.lenght == 0){
        task.tagsApplied = undefined;
    }else {
        task.tagsApplied = values;
    }
    handleTaskChange({"field": "tagId", "value": task.tagsApplied}, task.id, 'changeField');
    //setStorageData(user_data);
    jQuery(element).fadeOut(200).fadeIn(200);
}

jQuery(document).on('change', 'select.projects', function(e){
    var element = jQuery(this).find(":selected");
    var dayID = jQuery(this).attr("data-day-id");
    var taskID = jQuery(this).attr('data-task-id');
    var projectID = jQuery(element).attr('data-id');
    var categoryID = jQuery(element).attr('data-category-id');
    var task;
    if (dayID == "cur"){
        // current task
        task = user_data.current;
        dayID="currentTask";
    }else if(dayID.match(/all\d/i) != null){
        // all task list
        dayID = +dayID.substr(3,dayID.length);
        task = allTasks[dayID];
    }else {
        // old task
        task = user_data.thisweek[dayID].filter(function(day){
            return day.id == taskID;
        })[0];
    }
    if(categoryID == -1){
        categoryID = undefined;
    }
    task.projectApplied = projectID;
    task.categoryApplied = categoryID;
    handleTaskChange({"field": "categoryId", "value": task.categoryApplied }, task.id, 'changeField');
    handleTaskChange({"field": "projectId", "value": task.projectApplied}, task.id, 'changeField');
    //setStorageData(user_data);
    jQuery(this).fadeOut(200).fadeIn(200);
});

jQuery(document).on('click',  'a.deleteTaskLink', function(e) {
    if(confirm("This WILL delete this task! Press OK if you want to delete it.")){
        var dayID = jQuery(this).attr("data-day-id");
        var taskID = jQuery(this).attr('data-task-id');
        var currentlyRunningTask = JSON.parse(JSON.stringify(user_data.current));
        var task;
        var tmpTsk;
        if (dayID == "cur"){
            // current task
            task = JSON.parse(JSON.stringify(user_data.current));
            stopTimer();
            user_data.current = undefined;
            //setStorageData(user_data);
            user_data.current = JSON.parse(JSON.stringify(empty_task));
            user_data.currentTaskExists = false;
            createCurrentTaskPlaceholder();
            addEmptyTagsAndProjectsToCurrent();
        }else if(dayID.match(/all\d/i) != null){
            // all task list
            dayID = +dayID.substr(3,dayID.length);
            task = allTasks[dayID];
            if( dayID!= -1){
                allTasks.splice(dayID, 1);
            }
        }else {
            // old task
            tmpTsk = user_data.thisweek[dayID].filter(function(day){
                return day.id == taskID;
            })[0];
            task = JSON.parse(JSON.stringify(tmpTsk));
            var index = user_data.thisweek[dayID].indexOf(task);
            if( index!= -1){
                user_data.thisweek[dayID].splice(index, 1);
            }
            var temp = JSON.stringify(user_data.thisweek[dayID]);
            user_data.thisweek[dayID] = undefined;
            //setStorageData(user_data);
            if (!!user_data.thisweek[dayID] && user_data.thisweek[dayID].length == 0) {
                user_data.thisweek[dayID] = undefined;
            }else {
                user_data.thisweek[dayID] = JSON.parse(temp);
            }
        }
        handleTaskChange(task, task.id, 'deleteTask');
        //setStorageData(user_data);
        jQuery("#tasksOfTheWeek").html("");
        updateTaskList();
    }
});

jQuery(document).on('click', 'div.playStopControlButton', function(e) {
    var dayID = jQuery(this).attr("data-day-id");
    var taskID = jQuery(this).attr('data-task-id');
    var task;
    if(!!user_data.currentTaskExists){
        // remove current task from currently running
        var currentlyRunningTask = JSON.parse(JSON.stringify(user_data.current));
        currentlyRunningTask.endTime = Math.round(new Date()/1000);
        handleTaskChange({"field": "end", "value": currentlyRunningTask.endTime, "offset": new Date().getTimezoneOffset()}, user_data.current.id, 'changeField');
        stopTimer();
        user_data.current = undefined;
        //setStorageData(user_data);
        user_data.current = JSON.parse(JSON.stringify(empty_task));
        createCurrentTaskPlaceholder();
        addEmptyTagsAndProjectsToCurrent();
        jQuery("#currentTask span.circleButton").removeClass("stop").addClass("play");
        jQuery("#currentTask span.circleButton span.glyphicon").removeClass("glyphicon-stop").addClass("glyphicon-play");
    }
    if (dayID == "cur"){
        // current task
        if(!!user_data.currentTaskExists){
            //stop task
            if (user_data.thisweek[user_data.today]  == undefined){
                user_data.thisweek[user_data.today] = [];
            }
            currentlyRunningTask.endTime -= new Date().getTimezoneOffset()*60;
            user_data.thisweek[user_data.today].push(currentlyRunningTask);
            jQuery("#tasksOfTheWeek").html("");
            updateTaskList();
        }else{
            //start new task
            jQuery("#currentTask span.circleButton").removeClass("play").addClass("stop");
            jQuery("#currentTask span.circleButton span.glyphicon").removeClass("glyphicon-play").addClass("glyphicon-stop");
            user_data.current.startTime = Math.round(new Date()/1000);
            user_data.current.endTime = undefined;
            updateTask(user_data.current, "#currentTask");
            handleTaskChange({"task": user_data.current,"offset": new Date().getTimezoneOffset()}, null, 'addTask');
        }
        user_data.currentTaskExists = !user_data.currentTaskExists;
    }else if(dayID.match(/all\d/i) != null){
        // all task list
        dayID = +dayID.substr(3,dayID.length);
        task = allTasks[dayID];
        jQuery("#currentTask span.circleButton").removeClass("play").addClass("stop");
        jQuery("#currentTask span.circleButton span.glyphicon").removeClass("glyphicon-play").addClass("glyphicon-stop");
        user_data.currentTaskExists = true;
        user_data.current = JSON.parse(JSON.stringify(task));
        user_data.current.startTime = Math.round(new Date()/1000);
        user_data.current.endTime = undefined;
        updateTask(user_data.current, "#currentTask");
        handleTaskChange({"task": user_data.current,"offset": new Date().getTimezoneOffset()}, null, 'addTask');
    }else {
        // old task
        jQuery("#currentTask span.circleButton").removeClass("play").addClass("stop");
        jQuery("#currentTask span.circleButton span.glyphicon").removeClass("glyphicon-play").addClass("glyphicon-stop");
        user_data.currentTaskExists = true;
        task = user_data.thisweek[dayID].filter(function(day){
            return day.id == taskID;
        })[0];
        user_data.current = JSON.parse(JSON.stringify(task));
        user_data.current.startTime = Math.round(new Date()/1000);
        user_data.current.endTime = undefined;
        updateTask(user_data.current, "#currentTask");
        handleTaskChange({"task": user_data.current,"offset": new Date().getTimezoneOffset()}, null, 'addTask');
    }
    //setStorageData(user_data);
});
